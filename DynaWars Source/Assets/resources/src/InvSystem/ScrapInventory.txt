
	public void newStack(int slot, int stackamount, InventoryItem[] arraypassed)
	{

		int itemid;

		itemid = arraypassed[slot].id;
		
		mouseitem = FindItem(itemid);

	}

	private bool setnewItem = false;
	
	public void inventoryItemSlot(InventoryItem[] arraypassed, int slot, float xpos, float ypos) {

		string tooltipid = "";

		if(arraypassed == Slots.InventorySlots) {
			tooltipid = "Invs_";
		} else if(arraypassed == Slots.Accesories) {
			tooltipid = "Accs_";
		} else if(arraypassed == Slots.AmmoSlots) {
			tooltipid = "Ammo_";
		} else if(arraypassed == Slots.HotBarSlots) {
			tooltipid = "HotB_";
		}

		tooltipid = tooltipid + slot;
		if (arraypassed[slot] != null && mouseitem == null) {
			if (ItemBox(xpos, ypos, "", tooltipid)) {
				if (Input.GetKeyUp(KeyCode.Mouse0)) {
					if (arraypassed[slot].itemtype == "Bag"){
						arraypassed[slot].showBag = false;
					}
					stackCheck(arraypassed);
					mouseitem = arraypassed[slot];
					arraypassed[slot] = null;
				}
				if (Input.GetKeyUp(KeyCode.Mouse1)){
					if (arraypassed[slot]!= null && arraypassed[slot].itemtype == "Stack"){
						if (Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.LeftShift)){
							//DO SOMETHING IF SHIFT LEFT CLICK HAPPENS
							//need to check if there is alredy a tooltip for amount picker if so then we can use any other items put if statements
							stackamount = 1;
							stackCheck(arraypassed);
							arraypassed[slot].showStack = true;
						}
					}
					if (arraypassed[slot]!= null && arraypassed[slot].itemtype == "Bag"){
						if (Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.LeftShift)){
							openAllBags(arraypassed);
						} else {
							if (arraypassed[slot].showBag){
								arraypassed[slot].showBag = false;
							} else {
								arraypassed[slot].showBag = true;
							}
						}
					}
					if (arraypassed[slot]!= null && arraypassed[slot].itemtype == "Equip"){
						if (Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.LeftShift)){
							rightClickEquip(arraypassed,slot,true);
						} else {
							rightClickEquip(arraypassed,slot,false);
						}
					}
					if (arraypassed[slot] != null && arraypassed[slot].usable == "Consume"){
						if (arraypassed[slot].itemtype != "Stack"){
							//check timer
							Object.Destroy(arraypassed[slot].worldObject);
							arraypassed[slot] = null;
							//start timer
						} else {
							if (arraypassed[slot].itemstacksize == 1){
								Object.Destroy(arraypassed[slot].worldObject);
								arraypassed[slot] = null;
								//start timer
							} else {
								arraypassed[slot].itemstacksize = arraypassed[slot].itemstacksize - 1;
								//start timer
							}
						}
					}
					if (arraypassed[slot] != null && arraypassed[slot].usable == "Use"){
						if (arraypassed[slot].itemtype != "Equip"){
							//do effect
							Debug.Log ("DO EFFECT");
							//start timer
						}
					}
				}
			}
		} else {
			if (ItemBox(xpos, ypos, "", tooltipid)) {
				if (Input.GetKeyUp(KeyCode.Mouse0)) {
					if (mouseitem != null) {
						if (arraypassed[slot] != null) {
							if (arraypassed[slot].itemtype == "Bag"){
								arraypassed[slot].showBag = false;
							}
							if (arraypassed[slot].itemtype == "Stack"){
								arraypassed[slot].showStack = false;
							}
						}
						if (arraypassed[slot] != null && arraypassed[slot].itemtype == "Stack" && mouseitem.itemtype == "Stack" && arraypassed[slot].itemname == mouseitem.itemname ){//&& check if they are both the same type of stack else it
							
							if (arraypassed[slot].itemstacksize < arraypassed[slot].itemstacklimit){
								arraypassed[slot].itemstacksize = arraypassed[slot].itemstacksize + mouseitem.itemstacksize;
								if (arraypassed[slot].itemstacksize > arraypassed[slot].itemstacklimit){
									mouseitem.itemstacksize = arraypassed[slot].itemstacksize - arraypassed[slot].itemstacklimit;
									arraypassed[slot].itemstacksize = arraypassed[slot].itemstacklimit;
								} else {
									//need to chech here if together they are larger
									Object.Destroy(mouseitem.worldObject);
									mouseitem = null;
								}
								//do something
							} else {
								//this take the variable from this slot and makes it temporary so we can put it in to mouse cursor
								InventoryItem tempaa = arraypassed[slot];
								//what ever is in cursor will be put in the slot
								arraypassed[slot] = mouseitem;
								if (tempaa != null){ //IS THIS NECESARRY????????????
									mouseitem = tempaa;
								} else {
									mouseitem = null;
								}
							}
						} else {
							//this take the variable from this slot and makes it temporary so we can put it in to mouse cursor
							InventoryItem tempa = arraypassed[slot];
							//what ever is in cursor will be put in the slot

							string toolpid = tooltipid.Substring(0, 5);
							//Debug.Log(toolpid);

							if(toolpid == (mouseitem.itemtype+"_")) {
								//Debug.Log("if('"+toolpid+"'=='"+mouseitem.itemtype+"')");
								setnewItem = true;
							} else {
								if(toolpid == "Invs_" || toolpid == "HotB_") {
									//Debug.Log("if('"+toolpid+"'==('Invs_' || 'HotB_')");
									setnewItem = true;
								} else {
									//Debug.Log("set new item = false");
									setnewItem = false;
								}
							}

							if(setnewItem) {
								arraypassed[slot] = mouseitem;
								if (tempa != null){ //IS THIS NECESARRY????????????
									mouseitem = tempa;
								} else {
									mouseitem = null;
								}
							}
						}
					}
				}
				//this is where we do the logic for right mouse click when we have an item in hand
				if (Input.GetKeyUp(KeyCode.Mouse1)) {
					if (arraypassed[slot] != null){
						if (arraypassed[slot].itemtype == "Bag"){
							if (arraypassed[slot].showBag){
								arraypassed[slot].showBag = false;
							} else {
								arraypassed[slot].showBag = true;
							}
						}
						if (arraypassed[slot].itemtype == "Equip"){
							if (Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.LeftShift)){
								rightClickEquip(arraypassed,slot,true);
							} else {
								rightClickEquip(arraypassed,slot,false);
							}
						}
						if (arraypassed[slot] != null && arraypassed[slot].usable == "Consume"){
							if (arraypassed[slot].itemtype != "Stack"){
								//check timer
								Object.Destroy(arraypassed[slot].worldObject);
								arraypassed[slot] = null;
								//start timer
							} else {
								if (arraypassed[slot].itemstacksize == 1){
									Object.Destroy(arraypassed[slot].worldObject);
									arraypassed[slot] = null;
									//start timer
								} else {
									arraypassed[slot].itemstacksize = arraypassed[slot].itemstacksize - 1;
									//start timer
								}
							}
						}
						if (arraypassed[slot] != null && arraypassed[slot].usable == "Use"){
							if (arraypassed[slot].itemtype != "Equip"){
								//do effect
								Debug.Log ("DO EFFECT");
								//start timer
							}
						}
					}
				}
			}
		}
		if (arraypassed[slot] != null){
			//if(mouseitem == null) {
				GUI.DrawTexture ( new Rect(xpos+1,ypos+1,iconSizeW, iconSizeH),arraypassed[slot].itemtex);
			//}

			GUIStyle stackstyle = new GUIStyle();
			
			stackstyle.fontStyle = FontStyle.Bold;
			stackstyle.normal.textColor = Color.white;
			stackstyle.fontSize = 12;
			stackstyle.alignment = TextAnchor.LowerRight;

			//I may be able to use a style that can do right to left alignment
			int stacksize = 0;
			stacksize = stacksize + arraypassed[slot].itemstacksize;

			if(arraypassed[slot].itemstacksize > 1) {
				GUI.Label( new Rect(xpos,ypos,iconSizeW, iconSizeH), stacksize.ToString(), stackstyle);
			}
		}
		if (mouseheld){
			mouseOver = GUI.tooltip; 
		}
		if (arraypassed[slot] != null){
			if (arraypassed[slot].itemtype == "Stack"){
				if (arraypassed[slot].showStack){
					int aaa = 0;
					aaa = aaa + stackamount;
					//some kind of drag mouse increase decrease motion
					GUI.Box ( new Rect(900,700,100,50), "StackItemSelector");
					GUI.DrawTexture ( new Rect(900,700,100,50),emptyTex);
					GUI.Label( new Rect(940,700,100,100), aaa.ToString());
					if (GUI.Button( new Rect(900,710,20,20),"<")){
						if (stackamount > 1){
							stackamount --;
						}
					}
					if (GUI.Button( new Rect(980,710,20,20),">")){
						if (stackamount < arraypassed[slot].itemstacklimit){
							if (stackamount < arraypassed[slot].itemstacksize){
								stackamount ++;
							}
						}
					}
					if (GUI.Button( new Rect(900,730,50,20),"Okay")){
						arraypassed[slot].showStack = false;
						if (arraypassed[slot].itemstacksize == stackamount){
							arraypassed[slot].itemstacksize = stackamount;
							mouseitem = arraypassed[slot];
							arraypassed[slot] = null;
						} else {
							arraypassed[slot].itemstacksize = arraypassed[slot].itemstacksize - stackamount;
							newStack(slot,stackamount,arraypassed);
						} //when you click on another one you just take the mouse items stack size add it to the inventory and then make the mouse null
					}// you first check that its not too large otherwise you just add the item to it and then when you click again it would swap them
					if (GUI.Button( new Rect(950,730,50,20),"Cancel")){
						arraypassed[slot].showStack = false;
					}
				}
			}
		}
		itemToolTip(slot,xpos,ypos,arraypassed,tooltipid);
	}

	public void equipedItemSlot(int slot, float xpos, float ypos, string itemname){
		
		string tooltipid = "a";
		tooltipid = tooltipid + slot;

		if (itemname == "Ammo") {
			//inv = new InventoryItem[Slots.AmmoSlots.Length];
			inv = Slots.AmmoSlots;	
		} if (itemname == "Accs") {
			//inv = new InventoryItem[Slots.Accesories.Length];
			inv = Slots.Accesories;		
		}
		
		if (inv[slot] == null){
			if (ItemBox(xpos, ypos, "")) { //itemname)) {//GUI.Button( new Rect(xpos,ypos,iconSizeW, iconSizeH), itemname)){
				if (Input.GetKeyUp(KeyCode.Mouse0)) {
					if (mouseitem != null && mouseitem.itemtype == "Equip"){
						if (mouseitem.equipmenttype == itemname){
							inv[slot] = mouseitem;
							mouseitem = null;
						}
					}
				}
			}
		} else {
			if (ItemBox(xpos, ypos, "", tooltipid)) {//GUI.Button( new Rect(xpos,ypos,iconSizeW, iconSizeH), new GUIContent("", tooltipid))) {
				if (Input.GetKeyUp(KeyCode.Mouse0)) {
					if (mouseitem != null){
						if (mouseitem.itemtype == "Equip"){
							if (mouseitem.equipmenttype == itemname){
								InventoryItem tempb = inv[slot];
								inv[slot] = mouseitem;
								mouseitem = tempb;
							}
						}
					} else {
						mouseitem = inv[slot];
						inv[slot] = null;
					}
				}
				if (Input.GetKeyUp(KeyCode.Mouse1)) {
					if (inv[slot] != null && inv[slot].usable == "Use"){//check timer too
						//do effect
						Debug.Log ("DO EFFECT");
						//start timer
					}
				}
			}
			if (inv[slot] != null ){
				GUI.DrawTexture ( new Rect(xpos,ypos,iconSizeW, iconSizeH), inv[slot].itemtex);
			}
			if (mouseheld){
				mouseOver = GUI.tooltip; 
			}
			itemToolTip(slot,xpos,ypos,Slots.EquipedItem,tooltipid);
		}
	}
	
	
	
	public void rightClickEquip (InventoryItem[] item, int slot, bool shiftpressed){

		if (item[slot] != null && item[slot].equipmenttype == "Accs") {
			#pragma warning disable
			for(int x=0;x<LvlSys.AccsX*LvlSys.AccsY;x++) {
				if(Slots.Accesories[x] == null) {
					InventoryItem tempa = Slots.Accesories[x];
					Slots.Accesories[x] = item[slot];
					item[slot] = tempa;
					break;
				} else {
					return;
				}
			}
			#pragma warning restore
		}

		if (item[slot] != null && item[slot].equipmenttype == "Ammo") {
			#pragma warning disable
			for(int x=0;x<LvlSys.Ammo;x++) {
				if(Slots.Accesories[x] == null) {
					InventoryItem tempb = Slots.AmmoSlots[x];
					Slots.AmmoSlots[x] = item[slot];
					item[slot] = tempb;
					break;
				} else {
					return;
				}
			}
			#pragma warning restore
		}

	}
	
	
	
	
	
	public void bagItemSlot (int slot, float xpos, float ypos, InventoryItem[] bagarray, int toolnumber){
		
		string tooltipid = "";
		bool hasitem;
		
		if (toolnumber == 0){
			tooltipid = "b";
		}
		if (toolnumber == 1){
			tooltipid = "c";
		}
		if (toolnumber == 2){
			tooltipid = "d";
		}
		if (toolnumber == 3){
			tooltipid = "e";
		}
		if (toolnumber == 4){
			tooltipid = "f";
		}
		if (toolnumber == 5){
			tooltipid = "g";
		}
		if (toolnumber== 6){
			tooltipid = "h";
		}
		if (toolnumber == 7){
			tooltipid = "i";
		}

		if (toolnumber > 7) {
			tooltipid = "x";		
		}
		
		tooltipid = tooltipid + slot;
		
		if (bagarray[slot] != null && mouseitem == null){
			
			if (GUI.Button( new Rect(xpos,ypos,32,32), new GUIContent("", tooltipid))){
				if (Input.GetKeyUp(KeyCode.Mouse0)) {
					stackCheck(bagarray);
					mouseitem = bagarray[slot];
					bagarray[slot] = null;
				}
				if (Input.GetKeyUp(KeyCode.Mouse1)){
					if (bagarray[slot] != null){
						if (bagarray[slot].itemtype == "Stack"){
							if (Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.LeftShift)){
								//DO SOMETHING IF SHIFT LEFT CLICK HAPPENS
								stackamount = 1;
								stackCheck(bagarray);
								bagarray[slot].showStack = true;
							}
						}
						if (bagarray[slot].itemtype == "Equip"){
							if (Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.LeftShift)){
								rightClickEquip(bagarray,slot,true);
							} else {
								rightClickEquip(bagarray,slot,false);
							}
						}
						if (bagarray[slot]!= null){
							if (bagarray[slot] != null && bagarray[slot].usable == "Consume"){
								if (bagarray[slot].itemtype != "Stack"){
									//check timer
									Object.Destroy(bagarray[slot].worldObject);
									bagarray[slot] = null;
									//start timer
								} else {
									if (bagarray[slot].itemstacksize == 1){
										Object.Destroy(bagarray[slot].worldObject);
										bagarray[slot] = null;
										//start timer
									} else {
										bagarray[slot].itemstacksize = bagarray[slot].itemstacksize - 1;
										//start timer
									}
								}
							}
							if (bagarray[slot] != null && bagarray[slot].usable == "Use"){
								if (bagarray[slot].itemtype != "Equip"){
									//do effect
									Debug.Log ("DO EFFECT");
									//start timer
								}
							}
						}
					}
				}
			}
			
		} else {
			if (GUI.Button( new Rect(xpos,ypos,32,32), new GUIContent("", tooltipid))){
				if (Input.GetKeyUp(KeyCode.Mouse0)) {
					
					if (mouseitem != null){	
						if (mouseitem.itemtype != "Bag"){
							
							
							if (bagarray[slot] != null && bagarray[slot].itemtype == "Stack" && mouseitem.itemtype == "Stack" && bagarray[slot].itemname == mouseitem.itemname ){//&& check if they are both the same type of stack else it
								
								if (bagarray[slot].itemstacksize < bagarray[slot].itemstacklimit){
									
									bagarray[slot].itemstacksize = bagarray[slot].itemstacksize + mouseitem.itemstacksize;
									if (bagarray[slot].itemstacksize > bagarray[slot].itemstacklimit){
										mouseitem.itemstacksize = bagarray[slot].itemstacksize - bagarray[slot].itemstacklimit;
										bagarray[slot].itemstacksize = bagarray[slot].itemstacklimit;
									} else {
										//need to chech here if together they are larger
										Object.Destroy(mouseitem.worldObject);
										mouseitem = null;
									}
									//do something
								} else {
									InventoryItem tempaa= bagarray[slot];
									//what ever is in cursor will be put in the slot
									bagarray[slot] = mouseitem;
									if (tempaa != null){
										mouseitem = tempaa;
									} else {
										mouseitem = null;
									}
								}
							} else {
								InventoryItem tempa= bagarray[slot];
								//what ever is in cursor will be put in the slot
								bagarray[slot] = mouseitem;
								if (tempa != null){
									mouseitem = tempa;
								} else {
									mouseitem = null;
								}
							}
						} else {
							hasitem = bagCheck();
							if (!hasitem){
								InventoryItem tempb= bagarray[slot];
								//what ever is in cursor will be put in the slot
								bagarray[slot] = mouseitem;
								if (tempb != null){
									mouseitem = tempb;
								} else {
									mouseitem = null;
								}
							}
						}
					}	
				}
				if (Input.GetKeyUp(KeyCode.Mouse1)) {
					if (bagarray[slot] != null && bagarray[slot].itemtype == "Equip"){
						if (Input.GetKey(KeyCode.RightShift) || Input.GetKey(KeyCode.LeftShift)){
							rightClickEquip(bagarray,slot,true);
						} else {
							rightClickEquip(bagarray,slot,false);
						}
					}
					if (bagarray[slot] != null && bagarray[slot].usable == "Consume"){
						if (bagarray[slot].itemtype != "Stack"){
							//check timer
							Object.Destroy(bagarray[slot].worldObject);
							bagarray[slot] = null;
							//start timer
						} else {
							if (bagarray[slot].itemstacksize == 1){
								Object.Destroy(bagarray[slot].worldObject);
								bagarray[slot] = null;
								//start timer
							} else {
								bagarray[slot].itemstacksize = bagarray[slot].itemstacksize - 1;
								//start timer
							}
						}
					}
					if (bagarray[slot] != null && bagarray[slot].usable == "Use"){
						if (bagarray[slot].itemtype != "Equip"){
							//do effect
							Debug.Log ("DO EFFECT");
							//start timer
						}
					}
				}
			}
		}
		if (bagarray[slot] !=null){
			GUI.DrawTexture ( new Rect(xpos,ypos,32,32),bagarray[slot].itemtex);
			
			//I may be able to use a style that can do right to left alignment
			if (bagarray[slot].itemtype == "Stack"){
				int stacksizeb = 0;
				stacksizeb = stacksizeb + bagarray[slot].itemstacksize;
				int stackspace = 0;
				if (stacksizeb == 3){
					stackspace = 12;
				}
				if (stacksizeb == 2){
					stackspace = 19;
				}
				if (stacksizeb == 1){
					stackspace = 26;
				}
				GUI.Label( new Rect(xpos+stackspace,ypos+19,iconSizeW, iconSizeH), stacksizeb.ToString());
			}
			
		}
		
		if (mouseheld){
			mouseOver = GUI.tooltip; 
		}
		if (bagarray[slot] != null){
			if (bagarray[slot].itemtype == "Stack"){
				if (bagarray[slot].showStack){
					int aaa = 0;
					aaa = aaa + stackamount;
					//some kind of drag mouse increase decrease motion
					GUI.DrawTexture ( new Rect(900,700,100,50),emptyTex);
					GUI.Label( new Rect(940,700,100,100), aaa.ToString());
					if (GUI.Button( new Rect(900,710,20,20),"<")){
						if (stackamount > 1){
							stackamount --;
						}
					}
					if (GUI.Button( new Rect(980,710,20,20),">")){
						if (stackamount < bagarray[slot].itemstacklimit){
							if (stackamount < bagarray[slot].itemstacksize){
								stackamount ++;
							}
						}
					}
					if (GUI.Button( new Rect(900,730,50,20),"Okay")){
						bagarray[slot].showStack = false;
						if (bagarray[slot].itemstacksize == stackamount){
							bagarray[slot].itemstacksize = stackamount;
							mouseitem = bagarray[slot];
							bagarray[slot] = null;
						} else {
							bagarray[slot].itemstacksize = bagarray[slot].itemstacksize - stackamount;
							newStack(slot,stackamount,bagarray);
						} //when you click on another one you just take the mouse items stack size add it to the inventory and then make the mouse null
					}// you first check that its not too large otherwise you just add the item to it and then when you click again it would swap them
					if (GUI.Button( new Rect(950,730,50,20),"Cancel")){
						bagarray[slot].showStack = false;
					}
				}
			}
		}
		itemToolTip(slot,xpos,ypos,bagarray,tooltipid);
	}
	
	
	//This is part of the process of makeing a bag
	public void makeBag (float xpos, float ypos, int bagsize, Texture bagtex, InventoryItem[] arraypassed, string bagsname, InventoryItem[] passedarray, int slot){
		int slotnumber = -1;
		GUI.Box ( new Rect(xpos,ypos,163,bagsize*37 + 35), "");//this scales the texture too
		GUI.DrawTexture ( new Rect(xpos,ypos,163,bagsize*37 + 35), bagtex);
		GUI.Label( new Rect(xpos,ypos,163,30),bagsname);
		for(int i = 0; i < bagsize; i++){
			for(int j = 0; j < 4; j++){//the size of the horizontal bag size
				slotnumber ++;
				float xx = 32*j + 5*(j+1) + 5 + xpos;
				float yy = 32*i + 5*(i+1) + 30 + ypos;
				bagItemSlot(slotnumber,xx,yy,arraypassed,slot);
			}
		}
		if (GUI.Button( new Rect(xpos + 138,ypos + 5,20,20),"X")){
			if (passedarray[slot].showBag){
				passedarray[slot].showBag = false;
			} else {
				passedarray[slot].showBag = true;
			}
		}
	}
	
	
	//This is just a function that checks if a bag is in an inventory slot and its showbag is set to true, it will call a function to further open the bags and position them accordingly
	public void callBag (InventoryItem[] arraypassed, int slot, float xpos, float ypos){
		if (arraypassed[slot] != null && arraypassed[slot].itemtype == "Bag" && arraypassed[slot].showBag == true){
			makeBag(xpos,ypos,arraypassed[slot].bagsize,bagtexture,arraypassed[slot].BagItem,arraypassed[slot].itemname,arraypassed,slot);
		}
	}
	
	//This checks if there is items in the bag that is in the mouse hand so that we cant put bags with items in to other bags
	public bool bagCheck (){
		for(int i = 0; i < mouseitem.BagItem.Length; i++){
			if (mouseitem.BagItem[i] != null){
				return true;
			}
		}
		return false;
	}
	
	public void stackCheck (InventoryItem[] inventory){
		for(int i = 0; i < inventory.Length; i++){
			if (inventory[i] != null){
				if (inventory[i].itemtype == "Stack"){
					if (inventory[i].showStack){
						inventory[i].showStack = false;
					}
				}
				if (inventory[i].itemtype == "Bag"){
					for (int k = 0; k < 20; k++){
						if (inventory[i].BagItem[k] != null){
							if (inventory[i].BagItem[k].itemtype == "Stack"){
								inventory[i].BagItem[k].showStack = false;
							}
						}
					}
				}
			}
		}
	}
	//This toggles all bags in inventory when it is called
	public void openAllBags (InventoryItem[] inventory){
		int bagcount = 0;
		int bagsopen = 0;
		for( int i = 0; i < inventory.Length; i ++ ){
			if (inventory[i] != null){
				if (inventory[i].itemtype == "Bag"){
					bagcount ++;
					if (inventory[i].showBag == true){
						bagsopen ++;
					}
					inventory[i].showBag = true;
				}
			}
		}
		
		if (bagcount != bagsopen || bagsopen == 0){
			for( int k = 0; k < inventory.Length; k ++ ){
				if (inventory[k] != null){
					if (inventory[k].itemtype == "Bag"){
						inventory[k].showBag = true;
					}
				}
			}
		} else {
			for( int j = 0; j < inventory.Length; j ++ ){
				if (inventory[j] != null){
					if (inventory[j].itemtype == "Bag"){
						inventory[j].showBag = false;
					}
				}
			}
		}
	}
	
	//This is the item tooltip function for dispaying a tooltip when hovering over items
	//CAN PERHAPS PUT THE FIRST IF STATEMENT OUTSIDE OF THIS SO THIS DOESNT RUN
	public void itemToolTip (int slot, float xpos, float ypos, InventoryItem[] arraypassed, string tooltipid) 
	{
		if(mouseOver==tooltipid) {
			if (Input.GetKey(KeyCode.RightShift) == false && Input.GetKey(KeyCode.LeftShift) == false){
				tooltipitem1 = arraypassed[slot];
				if (xpos-100 > 0){
					tooltipx1 = xpos-100;
				} else {
					tooltipx1 = xpos + iconSizeW;
				}
				if (ypos-100 > 0){
					tooltipy1 = ypos-100;
				} else {
					tooltipy1 = ypos + iconSizeH;
				}
			} else {
				
				if (arraypassed[slot] != null){
					if (arraypassed[slot].itemtype == "Equip"){
						if(arraypassed[slot].equipmenttype == "Head"){
							if (Slots.EquipedItem[0] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[0];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[0] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Neck"){
							if (Slots.EquipedItem[1] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[1];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[1] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Shoulders"){
							if (Slots.EquipedItem[2] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[2];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[2] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Back"){
							if (Slots.EquipedItem[3] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[3];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[3] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Chest"){
							if (Slots.EquipedItem[4] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[4];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[4] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Waist"){
							if (Slots.EquipedItem[5] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[5];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[5] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Legs"){
							if (Slots.EquipedItem[6] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[6];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[6] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Feet"){
							if (Slots.EquipedItem[7] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[7];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[7] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Arms"){
							if (Slots.EquipedItem[8] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[8];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[8] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Hands"){
							if (Slots.EquipedItem[9] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[9];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[9] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Wrist"){
							if (Slots.EquipedItem[10] != null){
								if (Slots.EquipedItem[11] != null){
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[10];
									tooltipitem3 = Slots.EquipedItem[11];
									if (xpos-300 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
										tooltipx3 = xpos-300;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
										tooltipx3 = xpos + iconSizeW + 200;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
										tooltipy3 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
										tooltipy3 = ypos + iconSizeH;
									}
								} else {
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[10];
									if (xpos-200 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
									}
								}
							} else {
								if (Slots.EquipedItem[11] != null){
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[11];
									if (xpos-200 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
									}
								}
							}
							if (Slots.EquipedItem[10] == null && Slots.EquipedItem[11] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Finger"){
							if (Slots.EquipedItem[12] != null){
								if (Slots.EquipedItem[13] != null){
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[12];
									tooltipitem3 = Slots.EquipedItem[13];
									if (xpos-300 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
										tooltipx3 = xpos-300;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
										tooltipx3 = xpos + iconSizeW + 200;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
										tooltipy3 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
										tooltipy3 = ypos + iconSizeH;
									}
								} else {
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[12];
									if (xpos-200 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
									}
								}
							} else {
								if (Slots.EquipedItem[13] != null){
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[13];
									if (xpos-200 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
									}
								}
							}
							if (Slots.EquipedItem[12] == null && Slots.EquipedItem[13] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Ear"){
							if (Slots.EquipedItem[14] != null){
								if (Slots.EquipedItem[15] != null){
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[14];
									tooltipitem3 = Slots.EquipedItem[15];
									if (xpos-300 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
										tooltipx3 = xpos-300;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
										tooltipx3 = xpos + iconSizeW + 200;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
										tooltipy3 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
										tooltipy3 = ypos + iconSizeH;
									}
								} else {
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[14];
									if (xpos-200 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
									}
								}
							} else {
								if (Slots.EquipedItem[15] != null){
									tooltipitem1 = arraypassed[slot];
									tooltipitem2 = Slots.EquipedItem[15];
									if (xpos-200 > 0){
										tooltipx1 = xpos-100;
										tooltipx2 = xpos-200;
									} else {
										tooltipx1 = xpos + iconSizeW;
										tooltipx2 = xpos + iconSizeW + 100;
									}
									if (ypos-100 > 0){
										tooltipy1 = ypos-100;
										tooltipy2 = ypos-100;
									} else {
										tooltipy1 = ypos + iconSizeH;
										tooltipy2 = ypos + iconSizeH;
									}
								}
							}
							if (Slots.EquipedItem[14] == null && Slots.EquipedItem[15] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Primary"){
							if (Slots.EquipedItem[16] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[16];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[16] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Secondary"){
							if (Slots.EquipedItem[17] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[17];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[17] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Range"){
							if (Slots.EquipedItem[18] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[18];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[18] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
						if(arraypassed[slot].equipmenttype == "Ammo"){
							if (Slots.EquipedItem[19] != null){
								tooltipitem1 = arraypassed[slot];
								tooltipitem2 = Slots.EquipedItem[19];
								if (xpos-200 > 0){
									tooltipx1 = xpos-100;
									tooltipx2 = xpos-200;
								} else {
									tooltipx1 = xpos + iconSizeW;
									tooltipx2 = xpos + iconSizeW + 100;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
									tooltipy2 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
									tooltipy2 = ypos + iconSizeH;
								}
							}
							if (Slots.EquipedItem[19] == null){
								tooltipitem1 = arraypassed[slot];
								if (xpos-100 > 0){
									tooltipx1 = xpos-100;
								} else {
									tooltipx1 = xpos + iconSizeW;
								}
								if (ypos-100 > 0){
									tooltipy1 = ypos-100;
								} else {
									tooltipy1 = ypos + iconSizeH;
								}
							}
						}
					} else {
						tooltipitem1 = arraypassed[slot];
						if (xpos-100 > 0){
							tooltipx1 = xpos-100;
						} else {
							tooltipx1 = xpos + iconSizeW;
						}
						if (ypos-100 > 0){
							tooltipy1 = ypos-100;
						} else {
							tooltipy1 = ypos + iconSizeH;
						}
					}
				}
			}
		}
	}
	
	
	public float calculateweight (InventoryItem[] inventory){
		float weightamount = 0.0f;
		for( int i = 0; i < inventory.Length; i ++ ){
			if (inventory[i] != null){
				if (inventory[i].itemtype == "Bag"){
					weightamount = weightamount + inventory[i].itemweight;
					for( int k = 0; k < 28; k ++ ){
						if (inventory[i].BagItem[k] != null){
							if (inventory[i].BagItem[k].itemtype == "Stack"){
								weightamount = weightamount + (inventory[i].BagItem[k].itemweight * inventory[i].BagItem[k].itemstacksize);
							} else {
								weightamount = weightamount + inventory[i].BagItem[k].itemweight;
							}
						}
					}
				} else {
					if (inventory[i].itemtype == "Stack"){
						weightamount = weightamount + (inventory[i].itemweight * inventory[i].itemstacksize);
					} else {
						weightamount = weightamount + inventory[i].itemweight;
					}
				}
			}
		}
		for( int j = 0; j < Slots.EquipedItem.Length; j ++ ){
			if (Slots.EquipedItem[j] != null){
				weightamount = weightamount + Slots.EquipedItem[j].itemweight;
			}
		}
		if (mouseitem != null){
			if (mouseitem.itemtype == "Stack"){
				weightamount = weightamount + (mouseitem.itemweight * mouseitem.itemstacksize);
			} else {
				weightamount = weightamount + mouseitem.itemweight;
			}
		}

		float theweight = 0;
		theweight = theweight + weightamount;
		return theweight;
	}

====================


		//Part where the items are set
		
		/*if(Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(1) || Input.GetMouseButtonDown(2)) {
			mouseheld = false;
		}
		if(Input.GetMouseButtonUp(0) || Input.GetMouseButtonUp(1) || Input.GetMouseButtonUp(2)) {
			mouseheld = true;
		}*/
		
		if(mouseheld){
			mouseOver = GUI.tooltip; 
		}
		//Debug.Log (GUI.tooltip);
		
		Vector2 mousePosFix = Event.current.mousePosition;
		
		if(mouseitem != null){
			//Debug.Log("Trying to drop");
			if (!IsInventory()) { //(mouseOver == ""){//still need to add tooltip to other smaller things muh, this will also work for looking around
				//Debug.Log("Trying to drop1");
				if(Input.GetKeyDown(KeyCode.Mouse0)){
					//Debug.Log("Trying to drop2");
					readytodrop = true;
				}
				if(Input.GetKeyUp(KeyCode.Mouse0) && readytodrop){
					//Debug.Log("Trying to drop3");
					if(mouseitem.droppable){
						DropItem();
						//Debug.Log("Dropped");
						//CHECK TO SEE IF ITS A NO DROP IF SO DELETE IT
						mouseitem = null;// need to add like a drop dialog box here to accept or decline
						readytodrop = false;
					} else {
						mouseitem = null;// need to add like a drop dialog box here to accept or decline
						readytodrop = false;
						//mouseheld = false;
					}
				}
				//GUI.Box(new Rect(0,0,64,32),"Droppable");
			}
		
		}